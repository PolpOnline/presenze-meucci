/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/teachers/available/{absence_id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Available teachers for an absence */
		get: operations['available'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/teachers/can_be_absent': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Teachers who can be absent */
		get: operations['can_be_absent'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/logout': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Logout
		 * @description Logout the current user
		 */
		get: operations['logout'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/absence': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Added absences */
		get: operations['get'];
		put?: never;
		/** Add an absence */
		post: operations['post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/absence/{absence_id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		/** Delete absence */
		delete: operations['delete'];
		options?: never;
		head?: never;
		/** Modify absence */
		patch: operations['patch'];
		trace?: never;
	};
	'/import/{import_id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		/** Delete an import */
		delete: operations['delete'];
		options?: never;
		head?: never;
		/** Modify an import's metadata */
		patch: operations['patch'];
		trace?: never;
	};
	'/login': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Login
		 * @description Login
		 */
		post: operations['login'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/sign_up': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Sign Up
		 * @description Sign up and login automatically
		 */
		post: operations['sign_up'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/import': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** List imports */
		get: operations['get'];
		put?: never;
		/**
		 * Import File
		 * @description Import a schedule file. The file must be in XML format exported by OrarioFacile.
		 */
		post: operations['post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		PatchAbsenceRequest: {
			/** Format: int32 */
			substitute_teacher_availability_id?: number | null;
			/** @default uncovered */
			status: components['schemas']['AbsenceStatus'];
		};
		/** @enum {string} */
		AvailabilityType: 'AVAILABILITY' | 'RECOVERYHOURS';
		/** @description A lesson in the schedule. */
		RawLesson: {
			TEACHER?: string[] | null;
			_SITE?: string | null;
			SUBJECT?: string | null;
			TIME?: string | null;
			GROUP?: string[] | null;
			ROOM?: string[] | null;
			DURATION?: string | null;
			DAY?: null | components['schemas']['ItaDay'];
			_WEEK?: string | null;
			_MODULE?: string | null;
		};
		/** @enum {string} */
		AbsenceStatus: 'uncovered' | 'classDelayed' | 'classCanceled' | 'substituteFound';
		Credentials: {
			/** @description The email of the user */
			username: string;
			/** @description The password of the user */
			password: string;
		};
		CanBeAbsentTeacher: {
			/** Format: int32 */
			id: number;
			full_name: string;
		};
		ImportPatchRequest: {
			/** Format: date-time */
			end_ts?: string | null;
			/** Format: date-time */
			begin_ts?: string | null;
		};
		AbsentClasses: {
			/** Format: int32 */
			id: number;
			room?: string | null;
			substitute_teacher?: string | null;
			group?: string | null;
			time: string;
			absent_status: components['schemas']['AbsenceStatus'];
		};
		ScheduleFile: {
			LESSON: components['schemas']['RawLesson'][];
		};
		AvailableTeacher: {
			/** Format: int32 */
			id: number;
			availability_type: components['schemas']['AvailabilityType'];
			full_name: string;
		};
		AddAbsenceRequest: {
			/**
			 * Format: date
			 * @description The date of the absence. If not provided, defaults to today.
			 */
			date?: string | null;
			begin_time: string;
			end_time: string;
			/** Format: int32 */
			absent_teacher_id: number;
		};
		/** @enum {string} */
		ImportMode: 'dryRun' | 'write';
		Absence: {
			classes: components['schemas']['AbsentClasses'][];
			absent_teacher: string;
		};
		/** @enum {string} */
		ItaDay: 'LUN' | 'MAR' | 'MER' | 'GIO' | 'VEN' | 'SAB' | 'DOM';
		ImportInfo: {
			/** Format: date-time */
			end_ts: string;
			/** Format: int32 */
			id: number;
			/** Format: date-time */
			begin_ts: string;
			file_name: string;
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	available: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				absence_id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Available Teachers and their availability type */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['AvailableTeacher'][];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	can_be_absent: {
		parameters: {
			query?: {
				/**
				 * @description Date for which to get teachers who can be absent.
				 *     Results in the teachers who have lessons on that day.
				 *     If not provided, defaults to today.
				 */
				date?: string | null;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Absences and their status */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['CanBeAbsentTeacher'][];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	logout: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description User was logged out */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	get: {
		parameters: {
			query?: {
				/** @description Date for which to get absences. If not provided, defaults to today. */
				date?: string | null;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Absences and their status */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['Absence'][];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	post: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['AddAbsenceRequest'];
			};
		};
		responses: {
			/** @description Absence added */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Invalid input */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	delete: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				absence_id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Deleted absence */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Absence not found or not accessible */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	patch: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				absence_id: number;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['PatchAbsenceRequest'];
			};
		};
		responses: {
			/** @description Absence modified */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Absence not found or not accessible */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	delete: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				import_id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description The import was deleted */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	patch: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				import_id: number;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['ImportPatchRequest'];
			};
		};
		responses: {
			/** @description The import was patched */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	login: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['Credentials'];
			};
		};
		responses: {
			/** @description User was logged in */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Wrong password */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'text/plain': string;
				};
			};
			/** @description User not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'text/plain': string;
				};
			};
		};
	};
	sign_up: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['Credentials'];
			};
		};
		responses: {
			/** @description User signed up and logged in */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'text/plain': string;
				};
			};
		};
	};
	get: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description List of imports */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ImportInfo'][];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	post: {
		parameters: {
			query: {
				file_name: string;
				mode: components['schemas']['ImportMode'];
				begin_ts: string;
				end_ts: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/xml': components['schemas']['ScheduleFile'];
			};
		};
		responses: {
			/** @description File imported successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Error importing file */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
}
